1. **Write documentation in Markdown**
   - Write documentation in Markdown for an **imaginary** analysis of the number of steps you walked each day for a week, comparing over time and with friends. The Markdown must include:
     - **Top-Level Heading**: At least 1 heading at level 1, e.g., `# Introduction`
     - **Subheadings**: At least 1 heading at level 2, e.g., `## Methodology`
     - **Bold Text**: At least 1 instance of bold text, e.g., `**important**`
     - **Italic Text**: At least 1 instance of italic text, e.g., `*note*`
     - **Inline Code**: At least 1 instance of inline code, e.g., `sample_code`
     - **Code Block**: At least 1 instance of a fenced code block, e.g.,
       ```python
       print("Hello World")
       ```
     - **Bulleted List**: At least 1 instance of a bulleted list, e.g., `- Item`
     - **Numbered List**: At least 1 instance of a numbered list, e.g., `1. Step One`
     - **Table**: At least 1 instance of a table, e.g., `| Column A | Column B |`
     - **Hyperlink**: At least 1 instance of a hyperlink, e.g., `[Text](https://example.com)`
     - **Image**: At least 1 instance of an image, e.g., `![Alt Text](https://example.com/image.jpg)`
     - **Blockquote**: At least 1 instance of a blockquote, e.g., `> This is a quote`


2. **Compress an image**
   - Download the image below and compress it *losslessly* to an image that is less than 1,500 bytes.
     ![shapes](shapes.png)
   - By losslessly, we mean that every pixel in the new image should be identical to the original image.
   - Upload your losslessly compressed image (less than 1,500 bytes):


3. **Host your portfolio on GitHub Pages**
   - Publish a page using [GitHub Pages](https://pages.github.com/) that showcases your work. Ensure that your email address **<code>your-email@example.com</code>** is in the page's HTML.
   - GitHub pages are served via CloudFlare which [obfuscates emails](https://developers.cloudflare.com/waf/tools/scrape-shield/email-address-obfuscation/). So, wrap your email address inside a:
     ```html
     <!--email_off-->your-email@example.com<!--/email_off-->
     ```
   - What is the GitHub Pages URL? It might look like:
     ```


4. **Use Google Colab**
   - Let's make sure you can access Google Colab. Run this program on Google Colab, allowing all required access to your email ID: <code>your-email@example.com</code>.
     ```python
     import hashlib
     import requests
     from google.colab import auth
     from oauth2client.client import GoogleCredentials

     auth.authenticate_user()
     creds = GoogleCredentials.get_application_default()
     token = creds.get_access_token().access_token
     response = requests.get(
       "https://www.googleapis.com/oauth2/v1/userinfo",
       params={"alt": "json"},
       headers={"Authorization": f"Bearer {token}"}
     )
     email = response.json()["email"]
     hashlib.sha256(f"{email} {creds.token_expiry.year}".encode()).hexdigest()[-5:]
     ```
   - What is the result? (It should be a 5-character string)
     ```

     ```

5. **Use an Image Library in Google Colab**
   - [Download this image](lenna.webp). Create a new [Google Colab notebook](https://colab.research.google.com/) and run this code (after fixing a mistake in it) to calculate the number of pixels with a certain minimum brightness:
     ```python
     import numpy as np
     from PIL import Image
     from google.colab import files
     import colorsys

     # There is a mistake in the line below. Fix it
     image = Image.open(list(files.upload().keys)[0])

     rgb = np.array(image) / 255.0
     lightness = np.apply_along_axis(lambda x: colorsys.rgb_to_hls(*x)[1], 2, rgb)
     light_pixels = np.sum(lightness > 0.5)
     print(f'Number of pixels with lightness > 0.5: {light_pixels}')
     ```
   - What is the result? (It should be a number)
     ```

     ```

6. **Deploy a Python API to Vercel**
   - Download this
     ```
     ```
     which has the marks of 100 imaginary students.
   - Create and deploy a Python app to [Vercel](https://vercel.com/). Expose an API so that when a request like `https://your-app.vercel.app/api?name=X&name=Y` is made, it returns a JSON response with the marks of the names X and Y in the same order, like this:
     ```json
     { "marks": [10, 20] }
     ```
   - Make sure you enable **CORS** to allow GET requests from any origin.
   - What is the Vercel URL? It should look like:


7. **Create a GitHub Action**
   - Create a [GitHub action](https://github.com/features/actions) on one of your GitHub repositories. Make sure one of the steps in the action has a name that contains your email address <code>your-email@example.com</code>. For example:
     ```yaml
     jobs:
       test:
         steps:
           - name: your-email@example.com
             run: echo "Hello, world!"
     ```
   - Trigger the action and make sure it is the **most recent action**.
   - What is your repository URL? It will look like:
     ```

     ```

8. **Push an image to Docker Hub**
   - Create and push an image to [Docker Hub](https://hub.docker.com/). Add a tag named <code>your-email</code> to the image.
   - What is the Docker image URL? It should look like:
 
     ```

9. **Write a FastAPI server to serve data**
   - Download
     ```
     ```
     which has 2-columns:
     1. studentId: A unique identifier for each student, e.g. 1, 2, 3, ...
     2. class: The class (including section) of the student, e.g. 1A, 1B, ... 12A, 12B, ... 12Z
   - Write a FastAPI server that serves this data. For example, `/api` should return all students data (in the same row and column order as the CSV file) as a JSON like this:
     ```json
     {
       "students": [
         {
           "studentId": 1,
           "class": "1A"
         },
         {
           "studentId": 2,
           "class": "1B"
         }, ...
       ]
     }
     ```
   - If the URL has a query parameter `class`, it should return only students in those classes. For example, `/api?class=1A` should return only students in class 1A. `/api?class=1A&class=1B` should return only students in class 1A and 1B. There may be any number of classes specified. Return students in the same order as they appear in the CSV file (not the order of the classes).
   - Make sure you enable **CORS** to allow GET requests from any origin.
   - What is the API URL endpoint for FastAPI?
     ```

     ```

10. **Run a local LLM with Llamafile**
    - Download [Llamafile](https://github.com/Mozilla-Ocho/llamafile). Run the
      [Llama-3.2-1B-Instruct.Q6_K.llamafile](https://huggingface.co/Mozilla/Llama-3.2-1B-Instruct-llamafile/blob/main/Llama-3.2-1B-Instruct.Q6_K.llamafile?download=true)
      model with it.
    - Create a tunnel to the Llamafile server using [ngrok](https://ngrok.com/).
    - What is the ngrok URL?